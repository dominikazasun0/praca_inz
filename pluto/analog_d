#https://github.com/analogdevicesinc/pyadi-iio/blob/master/examples/ad9361_example.py
# Copyright (C) 2022 Analog Devices, Inc.
#
# SPDX short identifier: ADIBSD
import adi
import matplotlib.pyplot as plt
import numpy as np
from scipy import signal

tabela0=[]
tabela1=[]
# Przed użyciem kodu należy ustawić jego tryb pracy na podwójny odbiór i podwójne nadawania

sdr = adi.ad9361(uri="ip:192.168.2.1") #Tworzenie radia

# Konfigurowanie własności transmisji
sdr.rx_rf_bandwidth = 1000000 # szerokość pasma odbiornika
sdr.sample_rate = 6000000 # częstotliwość próbkowania
sdr.rx_lo = 70000000 # częstotliwość LO odbiornika
sdr.tx_lo = 70000000 # częstotliwość LO nadajnika
sdr.tx_cyclic_buffer = True # sygnał nadajnika jest wysyłany w nieskończonej pętli 
sdr.tx_hardwaregain_chan0 = -30
sdr.gain_control_mode_chan0 = "slow_attack"
sdr.tx_hardwaregain_chan1 = -30
sdr.gain_control_mode_chan1 = "slow_attack"

# Konfiguracja kanałów nadawczych i odbiorczych
sdr.rx_enabled_channels = [0 ,1] # dwa kanały odbiorcze włączone
sdr.tx_enabled_channels = [0, 1] # dwa kanały nadawcze włączone

# Tworzenie sygnału nadawczego
#fs = int(sdr.sample_rate)
#fc = int(1000000 / (fs / N)) * (fs / N)

N = 32768 # wielkość bufora danych (ilość próbek sygnału wysyłana podczas jednej transmisji)
fc = 10000 # częstotliwość transmitowanego sygnału w Hz
ts = 1 / float(sdr.sample_rate)
t = np.arange(0, N * ts, ts)

# Sygnał transmitowany na kanał 0
i = np.cos(2 * np.pi * t * fc) * 2 ** 14
q = np.sin(2 * np.pi * t * fc) * 2 ** 14
iq = i + 1j * q

# Sygnał transmitowany na kanał 1            
i1 = np.cos(2 * np.pi * t * fc - np.pi/2) * 2 ** 14
q1 = np.sin(2 * np.pi * t * fc - np.pi/2) * 2 ** 14
iq1 = i1 + 1j * q1

plt.plot(iq1)
plt.plot(iq)
plt.show()

# Wysyłanie danych
sdr.tx([iq ,iq1])

# Odbiór danych 20 razy (20 x N próbek)
for r in range(20):
    data = sdr.rx()

#Podział odebranych danych na kanał 1 i 0
Rx_0=data[0]
Rx_1=data[1] 
plt.plot(Rx_0)
plt.plot(Rx_1)
plt.show()
#print(Rx_0)
#print(Rx_1)
prev=Rx_0[0]
prev1=Rx_1[0]

for i  in range(1,len(Rx_0)):
    if Rx_0[i].real < 0 and prev.real > 0 :
        tabela0.append(Rx_0[i])
        #print("było 0")
    prev=Rx_0[i]

for j  in range(1,len(Rx_1)):
    if Rx_1[j].real < 0 and prev1.real > 0 :
        tabela1.append(Rx_1[j])
        #print("było 0")
    prev1=Rx_1[j]
print(tabela0)    
print(tabela1)
#kąt_w_stopniach = (np.angle(tabela1)-np.angle(tabela0)) * (180 / np.pi)
#kąt= (np.angle(tabela1) - np.angle(tabela0))* (180 / np.pi)
#print(kąt)
#print(len(Rx_0))

with open('chanel0.txt', 'w') as plik:
    # Zapisz dane do pliku
    for element in Rx_0:
        plik.write(str(element) + '\n')

with open('chanel1.txt', 'w') as plik:
    # Zapisz dane do pliku
    for element in Rx_1:
        plik.write(str(element) + '\n')        
